// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  firebaseUid String @unique
  phone     String   @unique
  role      UserRole @default(OWNER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  societiesCreated Society[]
  registrations   Registration[]
  auditLogs       AuditLog[]

  @@map("users")
}

model Society {
  id          String   @id @default(cuid())
  name        String   @unique
  address     String
  city        String
  state       String
  pincode     String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdByUserId String
  createdByUser   User           @relation(fields: [createdByUserId], references: [id])
  registrations   Registration[]

  @@map("societies")
}

model Registration {
  id              String           @id @default(cuid())
  userId          String
  societyId       String?
  status          RegistrationStatus @default(PENDING)
  funnelStage     FunnelStage     @default(INITIATED)
  submittedAt     DateTime?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  society   Society?    @relation(fields: [societyId], references: [id])
  documents Document[]
  payments  Payment[]

  @@map("registrations")
}

model Document {
  id             String   @id @default(cuid())
  registrationId String
  type           DocumentType
  s3Key          String
  url            String
  uploadedAt     DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  registration Registration @relation(fields: [registrationId], references: [id])

  @@map("documents")
}

model Payment {
  id                  String        @id @default(cuid())
  registrationId      String
  razorpayOrderId     String        @unique
  razorpayPaymentId   String?       @unique
  status              PaymentStatus @default(PENDING)
  amount              Decimal       @db.Decimal(10, 2)
  currency            String        @default("INR")
  createdAt           DateTime      @default(now())
  paidAt              DateTime?
  updatedAt           DateTime      @updatedAt

  // Relations
  registration Registration @relation(fields: [registrationId], references: [id])

  @@map("payments")
}

model AuditLog {
  id           String   @id @default(cuid())
  actorUserId  String
  entityType   String
  entityId     String
  action       String
  dataJson     Json
  createdAt    DateTime @default(now())

  // Relations
  actorUser User @relation(fields: [actorUserId], references: [id])

  @@map("audit_logs")
}

model WebhookEvent {
  id          String           @id @default(cuid())
  provider    String
  eventId     String           @unique
  signature   String?
  payloadJson Json
  processedAt DateTime?
  status      WebhookStatus    @default(PENDING)
  retryCount  Int              @default(0)
  maxRetries  Int              @default(3)
  nextRetryAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("webhook_events")
}

enum UserRole {
  SUPPORT
  COMMITTEE
  OWNER
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum FunnelStage {
  INITIATED
  DOCUMENTS_UPLOADED
  PAYMENT_PENDING
  PAYMENT_COMPLETED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum DocumentType {
  IDENTITY_PROOF
  ADDRESS_PROOF
  SOCIETY_REGISTRATION
  BANK_STATEMENT
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum WebhookStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
