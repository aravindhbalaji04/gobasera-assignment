name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7-alpine'

jobs:
  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9000:9000
          - 9001:9001
        command: server /data --console-address ":9001"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          cd apps/backend
          cp env.example .env
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "MINIO_ENDPOINT=localhost" >> .env
          echo "MINIO_PORT=9000" >> .env
          echo "MINIO_ACCESS_KEY=minioadmin" >> .env
          echo "MINIO_SECRET_KEY=minioadmin123" >> .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "FIREBASE_PROJECT_ID=test-project" >> .env
          echo "RAZORPAY_KEY_ID=test-key" >> .env
          echo "RAZORPAY_KEY_SECRET=test-secret" >> .env

      - name: Generate Prisma client
        run: |
          cd apps/backend
          npm run db:generate

      - name: Run database migrations
        run: |
          cd apps/backend
          npm run db:migrate

      - name: Run linting
        run: |
          cd apps/backend
          npm run lint

      - name: Run type checking
        run: |
          cd apps/backend
          npm run typecheck

      - name: Run unit tests
        run: |
          cd apps/backend
          npm run test

      - name: Run integration tests
        run: |
          cd apps/backend
          npm run test:e2e

      - name: Generate coverage report
        run: |
          cd apps/backend
          npm run test:cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment
        run: |
          cd apps/frontend
          cp env.example .env
          echo "VITE_API_URL=http://localhost:3001" >> .env
          echo "VITE_FIREBASE_API_KEY=test-api-key" >> .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=test.firebaseapp.com" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=test-project" >> .env

      - name: Run linting
        run: |
          cd apps/frontend
          npm run lint

      - name: Run type checking
        run: |
          cd apps/frontend
          npm run typecheck

      - name: Install Playwright browsers
        run: |
          cd apps/frontend
          npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          cd apps/frontend
          npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: apps/frontend/playwright-report/
          retention-days: 30

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: |
          cd apps/backend
          npm run build

      - name: Build frontend
        run: |
          cd apps/frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/backend/dist/
            apps/frontend/dist/
          retention-days: 7

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/society-registration-backend:latest ./apps/backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/society-registration-frontend:latest ./apps/frontend
          
          docker push ${{ secrets.DOCKER_USERNAME }}/society-registration-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/society-registration-frontend:latest

  # Deployment (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
          # Example: kubectl apply, docker-compose up, etc.

  # Deployment (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging..."
          # Add your staging deployment commands here

  # Notifications
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security, build]
    if: always()
    
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "One or more jobs failed!"
          # Add notification logic here (Slack, email, etc.)
          
      - name: Notify on success
        if: success()
        run: |
          echo "All jobs completed successfully!"
          # Add success notification logic here
